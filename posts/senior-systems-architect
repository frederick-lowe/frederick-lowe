People often ask me how I got into software, and my answer — like most of my answers — probably feels like navigating a maze.

It began in 1980 with a Commodore 64 and BASIC programs from Creative Computing magazine. The code I 'wrote' back then didn’t do much. There were joystick drivers, simple programs for painting and generating sounds, and text games. One might think copying software line for line would have diminished my sense of accomplishment. But no matter how baldly plagiaristic my efforts, when it ran, it felt like a win.

In 7th grade, I learned to touch type, thanks to a forward-thinking middle school program aimed at preparing students for the coming age of ubiquitous computing. My school didn't have computers or a lab yet, but daily practice on the futuristic-looking IBM Selectric typewriters led to faster transcription. Through trial and error — mostly error — I slowly began to understand the BASIC programming language and the routines I was copying.

In 8th grade, I got into trouble for modifying all 30 copies of Oregon Trail in our computer lab to drop swear words during the ASCII hunting scenes. Classmates giggled in mild shock as 'NICE SHOT …' became 'HOLY SHIT…' I thought it was uproarious. Clever even. The principal, not so much. A three-day suspension followed, during which I scarfed down double-batches of hastily prepared Kraft Macaroni and Cheese while copying more BASIC programs from magazines. It’s become part of my personal mythology that my teacher opined I’d never amount to anything in computers. I may yet prove him wrong.

I kept tinkering with computers and networks throughout high school and eventually studied Computer Science formally at a decent Midwestern university. My first 'real' job came at 24 when I joined a new kind of company — a web development firm. Our main client (and eventual investor) was one of the world’s largest ad agencies. The job taught me how to work on deadline. We built comically expensive, sprawling Websites for global brands, won shiny advertising awards, and grew at pace with the exploding demand for our services.

After 18 months, a former professor offered me a Director of Development role at a startup. There, I learned how to build an MVP, design and optimize complex relational databases, juggle product development to support a sales team, set up IP networks, and — critically — how to scale everything. We grew from 10 to nearly 100 employees, hitting $15MM per quarter in cash flow. Just before the company went public, I realized my job had changed and I wasn't making things anymore. It was time to move on.

Over the next 20 years, I served as an individual contributor, project manager, team lead, or technical executive in multiple companies. I delivered hundreds of projects for major brands and media companies, taking me all over the United States — San Francisco, Los Angeles, New York, Austin — and eventually beyond, to Tokyo, Beijing, Taipei, Manila, and Peru. One year, I flew 148,000 miles. Along the way, I worked with most forms of web and internet tech — dozens of programming languages, databases, APIs, protocols, frameworks, and service platforms.

My professional history makes it possible for me — the world’s second-most reluctant self-promoter — to confidently wear a Senior Systems Architect lanyard. But it’s less a badge of attainment than a statement of experience. Even today, I’m still getting into software. It’s a discipline where the finish line runs away as soon as you approach it.